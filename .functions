#!/usr/bin/env bash

# Create a new directory and enter it
mkd() {
    mkdir -p "$@" && cd "$@" || exit
}

# Create a temporary directory and enter it
tmpd() {
    local dir

    if [ $# -eq 0 ]; then
        dir=$(mktemp -d)
    else
        dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
    fi

    cd "$dir" || exit
}

# Remove a directory and its files
rmd() {
    rm -rf "$@"
}

# Moves a file to the macOS trash
trash() {
    command mv "$@" ~/.Trash
}

# Fuzzy find a file, with optional initial file name, and then edit
# https://bluz71.github.io/2018/11/26/fuzzy-finding-in-bash-with-fzf.html
fzf_find_edit() {
    local file
    file=$(
        fzf --query="$1" --no-multi --select-1 --exit-0 \
            --preview 'bat --color=always --line-range :500 {}'
    )
    if [[ -n "$file" ]]; then
        $EDITOR "$file"
    fi
}
# Fuzzy find a directory, with optional initial directory name, and then change to it
# https://bluz71.github.io/2018/11/26/fuzzy-finding-in-bash-with-fzf.html
fzf_change_directory() {
    local directory
    directory=$(
        fd --type d |
            fzf --query="$1" --no-multi --select-1 --exit-0 \
                --preview 'tree -C {} | head -100'
    )
    if [[ -n $directory ]]; then
        cd "$directory" || exit
    fi
}

# Fuzzy find a process or group of processes, then SIGKILL them.
# https://bluz71.github.io/2018/11/26/fuzzy-finding-in-bash-with-fzf.html
fzf_kill() {
    local pids
    pids=$(ps -f -u "$USER" | sed 1d | fzf | awk '{print $3}')
    if [[ -n "$pids" ]]; then
        echo "$pids" | xargs kill -9 "$@"
    fi
}
# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
targz() {
    local archive_name="${1%/}.tar"
    local exclude_pattern="--exclude=.DS_Store"
    local size cmd

    # Create the tar archive
    tar "${archive_name}" "${exclude_pattern}" "${@}" || return 1

    # Determine the size of the tar archive
    size=$(stat -f"%z" "${archive_name}" 2>/dev/null || stat -c"%s" "${archive_name}" 2>/dev/null)

    # Choose compression tool based on size and availability
    if ((size < 52428800)) && command -v zopfli 2>/dev/null; then
        cmd="zopfli"
    elif command -v pigz 2>/dev/null; then
        cmd="pigz"
    else
        cmd="gzip"
    fi

    # Compress the tar archive
    echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`..."
    "${cmd}" -v "${archive_name}" || return 1

    # Remove the uncompressed tar archive
    [ -f "${archive_name}" ] && rm "${archive_name}"

    # Determine the size of the compressed archive
    zipped_size=$(stat -f"%z" "${archive_name}.gz" 2>/dev/null || stat -c"%s" "${archive_name}.gz" 2>/dev/null)

    echo "${archive_name}.gz ($((zipped_size / 1000)) kB) created successfully."
}

# Extract most know archives with one command
extract() {
    if [ -f "$1" ]; then
        case "$1" in
        *.tar.gz | *.tgz)
            tar -xzf "$1"
            ;;
        *.tar.xz)
            tar -xJf "$1"
            ;;
        *.tar.bz2 | *.tbz2)
            tar -xjf "$1"
            ;;
        *.zip)
            unzip "$1"
            ;;
        *.rar)
            unrar x "$1"
            ;;
        *.7z)
            7z x "$1"
            ;;
        *.gz)
            gunzip "$1"
            ;;
        *.bz2)
            bunzip2 "$1"
            ;;
        *)
            echo "Unsupported archive format: $1"
            return 1
            ;;
        esac
    else
        echo "File not found: $1"
        return 1
    fi
}

# Determine size of a file or total size of a directory
fs() {
    if du -b /dev/null >/dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    # shellcheck disable=SC2199
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg -- .[^.]* *
    fi
}

# Get colors in manual pages
man() {
    env \
        LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
        LESS_TERMCAP_md="$(printf '\e[1;31m')" \
        LESS_TERMCAP_me="$(printf '\e[0m')" \
        LESS_TERMCAP_se="$(printf '\e[0m')" \
        LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
        LESS_TERMCAP_ue="$(printf '\e[0m')" \
        LESS_TERMCAP_us="$(printf '\e[1;32m')" \
        man "$@"
}

# UTF-8-encode a string of Unicode symbols
escape() {
    local args
    mapfile -t args < <(printf "%s" "$*" | xxd -p -c1 -u)
    printf "\\\\x%s" "${args[@]}"
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo "" # newline
    fi
}

# Decode \x{ABCD}-style Unicode escape sequences
unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$*\""
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo "" # newline
    fi
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified."
        return 1
    fi

    local domain="${1}"
    echo "Testing ${domain}…"
    echo "" # newline

    local tmp
    tmp=$(echo -e "GET / HTTP/1.0\nEOT" |
        openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText
        certText=$(echo "${tmp}" |
            openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version")
        echo "Common Name:"
        echo "" # newline
        echo "${certText}" | rg "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//"
        echo "" # newline
        echo "Subject Alternative Name(s):"
        echo "" # newline
        echo "${certText}" | rg -A 1 "Subject Alternative Name:" |
            sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
        return 0
    else
        echo "ERROR: Certificate not found."
        return 1
    fi
}

# Query Wikipedia via console over DNS
wiki() {
    dig +short txt "$*".wp.dg.cx | sd --string-mode 's/"//g'
}

# Logout from OS X via the Terminal
logout() {
    osascript -e 'tell application "System Events" to log out'
    builtin logout
}

# List processes owned by an user
myps() {
    ps "$@" u "$USER" -o pid,%cpu,%mem,start,time,bsdtime,command
}

# Open any file in MacOS Quicklook Preview
ql() {
    qlmanage -p "$*" >&/dev/null
}

# Start an HTTP server from a directory, optionally specifying the port
httpserver() {
    local port="${1:-8000}"
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# `tree` display a tree structure with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `bat` that preserves colors and line numbers.
tree() {
    #tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRnX;
    eza --all --tree --color always --ignore-glob '.git|node_modules' --group-directories-first | bat
}

## hammer a service with curl for a given number of times
## usage: curlhammer $url
curlhammer() {
    bot "About to hammer $1 with $2 curls ⇒"
    echo "curl -k -s -D - $1 -o /dev/null | rg 'HTTP/1.1' | sed 's/HTTP\/1.1 //'"
    for ((i = 1; i <= "$2"; i++)); do
        curl -k -s -D - "$1" -o /dev/null | rg 'HTTP/1.1' | sed 's/HTTP\/1.1 //'
    done
    bot "Done"
}

## curlheader will return only a specific response header or all response headers for a given URL
## usage: curlheader $header $url
## usage: curlheader $url
curlheader() {
    if [[ -z "$2" ]]; then
        echo "curl -k -s -D - $1 -o /dev/null"
        curl -k -s -D - "$1" -o /dev/null:
    else
        echo "curl -k -s -D - $2 -o /dev/null | rg $1:"
        curl -k -s -D - "$2" -o /dev/null | rg "$1":
    fi
}

## Get the timings for a curl to a URL
## usage: curltime $url
curltime() {
    curl -w '   time_namelookup:  %{time_namelookup}\n\
      time_connect:  %{time_connect}\n\
   time_appconnect:  %{time_appconnect}\n\
  time_pretransfer:  %{time_pretransfer}\n\
     time_redirect:  %{time_redirect}\n\
time_starttransfer:  %{time_starttransfer}\n\
--------------------------\n\
        time_total:  %{time_total}\n' -o /dev/null -s "$1"
}

# httpdebug: Function to download a web page and show info on what took time
httpdebug() {
    curl "$@" -o /dev/null -w 'dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n'
}

# shellcheck disable=SC2004
matrix() {
    echo -e "\\e[1;40m"
    clear
    while :; do
        echo $LINES $COLUMNS $(($RANDOM % $COLUMNS)) $(($RANDOM % 72))
        sleep 0.05
    done | awk '{ letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*()"; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}
